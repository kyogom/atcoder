#!/usr/bin/env python3
import sys


def solve(n: int, S: "List[str]"):
    alphabets = "abcdefghijklmnopqrstuvwxyz"
    counts = {}
    counts_list = []
    result_map = {}
    for i in range(len(alphabets)):
        counts[alphabets[i]] = 0
    for string in S:
        for s in string:
            counts[s] = counts[s] + 1
        counts_list.append(counts.copy())
        for i in range(len(alphabets)):
            counts[alphabets[i]] = 0
    for i in range(len(alphabets)):
        seq = [counts[alphabets[i]] for counts in counts_list]
        result_map[alphabets[i]] = min(seq)
    ans = ''
    for key in result_map:
        for i in range(result_map[key]):
            ans = ans + key
    print(ans)
    return


# Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    n = int(next(tokens))  # type: int
    S = [next(tokens) for _ in range(n)]  # type: "List[str]"
    solve(n, S)

if __name__ == '__main__':
    main()
